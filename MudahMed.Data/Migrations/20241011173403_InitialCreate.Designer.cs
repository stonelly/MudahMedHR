// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MudahMed.Data.DataContext;

#nullable disable

namespace MudahMed.Data.Migrations
{
    [DbContext(typeof(DataDbContext))]
    [Migration("20241011173403_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AppRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AppUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("769f41bd-ccd4-45ba-abbd-550ccd0b62e3"),
                            RoleId = new Guid("9f685d0f-bd6f-44dd-ab60-c606952eb2a8")
                        },
                        new
                        {
                            UserId = new Guid("31986efe-9171-44e7-8503-1b4c8f9c1d1b"),
                            RoleId = new Guid("4e233be7-c199-4567-9c07-9271a9de4c64")
                        },
                        new
                        {
                            UserId = new Guid("faed90a2-9f7d-411a-8119-0fa3a668e660"),
                            RoleId = new Guid("376c1d1e-0b04-47da-9657-a2a87faf0a59")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens", (string)null);
                });

            modelBuilder.Entity("MudahMed.Data.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AppRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9f685d0f-bd6f-44dd-ab60-c606952eb2a8"),
                            ConcurrencyStamp = "9813a41e-55a0-454b-8e47-3b3b39b65527",
                            Description = "Administrator role",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("4e233be7-c199-4567-9c07-9271a9de4c64"),
                            ConcurrencyStamp = "ae808944-13f5-4909-aa73-82a1a2a2cb4c",
                            Description = "Corporate HR",
                            Name = "Corporate",
                            NormalizedName = "CORPORATE"
                        },
                        new
                        {
                            Id = new Guid("376c1d1e-0b04-47da-9657-a2a87faf0a59"),
                            ConcurrencyStamp = "58cac793-36e0-4d9e-88e5-d5af2ba6a1c2",
                            Description = "Clinic User",
                            Name = "Clinic",
                            NormalizedName = "CLINIC"
                        },
                        new
                        {
                            Id = new Guid("b448a7dc-54c6-4060-90f0-86965c07e8f0"),
                            ConcurrencyStamp = "ee1a11a0-d39b-4907-9f68-ddeffe2ff191",
                            Description = "Employee User",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("MudahMed.Data.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("RefId")
                        .HasColumnType("int");

                    b.Property<string>("RefTable")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AppUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("769f41bd-ccd4-45ba-abbd-550ccd0b62e3"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ca5bcd90-cea6-4b8c-b3a7-2911c0d6bdca",
                            CreatedDate = new DateTime(2024, 10, 12, 1, 34, 2, 281, DateTimeKind.Local).AddTicks(3422),
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FullName = "System Adminitrator",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJllC7hr4wwQHtFp0UwxRjbbyoWOOZ/wneHiQUu7uHT5mmuQvyWN+tQ+cdKbbOYABg==",
                            PhoneNumberConfirmed = false,
                            RefId = 1,
                            RefTable = "tblCorp",
                            SecurityStamp = "",
                            Status = -1,
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("31986efe-9171-44e7-8503-1b4c8f9c1d1b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bdfe1f0e-99e3-4a61-9a26-1aa8c901c997",
                            Email = "corporate@gmail.com",
                            EmailConfirmed = true,
                            FullName = "HR Adminitrator",
                            LockoutEnabled = false,
                            NormalizedEmail = "corporate@GMAIL.COM",
                            NormalizedUserName = "corporate@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGziLUejJiTruwTrW+L1MWUfxBweTtiV765PRs4Yeur/dNhbI5AJ/OvmVS/bUMch6Q==",
                            PhoneNumberConfirmed = false,
                            RefId = 1,
                            RefTable = "tblCorp",
                            SecurityStamp = "",
                            Status = -1,
                            TwoFactorEnabled = false,
                            UserName = "corporate@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("faed90a2-9f7d-411a-8119-0fa3a668e660"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6dd2a859-8906-4190-9e8b-44ad689f90db",
                            Email = "clinic@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Clinic Adminitrator",
                            LockoutEnabled = false,
                            NormalizedEmail = "clinic@GMAIL.COM",
                            NormalizedUserName = "clinic@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIEJbh1qh0Bsi6/9r4DAS6W8v6qrEWoJt2ee5SlXenHtR9OIF2xeGhFwzDrV4WZbzA==",
                            PhoneNumberConfirmed = false,
                            RefId = 1,
                            RefTable = "tblClinic",
                            SecurityStamp = "",
                            Status = -1,
                            TwoFactorEnabled = false,
                            UserName = "clinic@gmail.com"
                        });
                });

            modelBuilder.Entity("MudahMed.Data.Entities.Bank", b =>
                {
                    b.Property<int>("Bank_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Bank_id"), 1L, 1);

                    b.Property<string>("Bank_name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDisplay")
                        .HasColumnType("bit");

                    b.HasKey("Bank_id");

                    b.ToTable("tblBanks", (string)null);

                    b.HasData(
                        new
                        {
                            Bank_id = 1,
                            Bank_name = "Malayan Banking Berhad",
                            IsDisplay = true
                        });
                });

            modelBuilder.Entity("MudahMed.Data.Entities.Clinic", b =>
                {
                    b.Property<int>("ClinicID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClinicID"), 1L, 1);

                    b.Property<string>("BankAccNo")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("BankID")
                        .HasColumnType("int");

                    b.Property<string>("ClinicGroup")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Clinic_addr1")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Clinic_addr2")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Clinic_addr3")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Clinic_cont_MMC")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Clinic_cont_OHD")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Clinic_name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Corp_ContactNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Corp_RegNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Corp_TIN")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Corp_fax")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Handphone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool?>("Is24Hour")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAudF")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAvailAN")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAvailFMDoc")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAvailMC")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAvailMS")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCPR")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsECG")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsENT")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsFBHAM")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsIVD")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLocDoc")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsNebulizer")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsOHDDoc")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsOT")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPCD")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPapSme")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSpiro")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsUFEME")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsUltraSound")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsXray")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsXrayReader")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("LocumDoc1")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LocumDoc1MMC")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LocumDoc1OHD")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LocumDoc2")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LocumDoc2MMC")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LocumDoc2OHD")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PayeeName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PermenantDoc1")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PermenantDoc1MMC")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PermenantDoc1OHD")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PermenantDoc2")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PermenantDoc2MMC")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PermenantDoc2OHD")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("RecruitDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SSMNo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("city")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("panel_type")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("postcode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("rendered_svc")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("state")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ClinicID");

                    b.HasIndex("BankID");

                    b.ToTable("tblClinic", (string)null);

                    b.HasData(
                        new
                        {
                            ClinicID = 1,
                            Clinic_name = "Clinic Test 1",
                            IsActive = false,
                            Latitude = 0m,
                            Longitude = 0m
                        });
                });

            modelBuilder.Entity("MudahMed.Data.Entities.Corp", b =>
                {
                    b.Property<int>("CorpID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CorpID"), 1L, 1);

                    b.Property<string>("BankAccNo")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("BankID")
                        .HasColumnType("int");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CorpGroupID")
                        .HasColumnType("int");

                    b.Property<string>("Corp_ContactNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Corp_RegNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Corp_TIN")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Corp_addr1")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Corp_addr2")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Corp_addr3")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Corp_fax")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Corp_name")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Email")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("FinanceEmail")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("IndustryField")
                        .HasColumnType("int");

                    b.Property<bool>("IsSuspend")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("city")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("postcode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("state")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CorpID");

                    b.HasIndex("BankID");

                    b.HasIndex("CorpGroupID");

                    b.ToTable("tblCorp", (string)null);

                    b.HasData(
                        new
                        {
                            CorpID = 1,
                            BankID = 1,
                            CorpGroupID = 1,
                            Corp_name = "MudahMed Sdb Bhd",
                            IndustryField = 1,
                            IsSuspend = false,
                            LastModifiedDate = new DateTime(2024, 10, 12, 1, 34, 2, 271, DateTimeKind.Local).AddTicks(761),
                            createdDate = new DateTime(2024, 10, 12, 1, 34, 2, 271, DateTimeKind.Local).AddTicks(759)
                        });
                });

            modelBuilder.Entity("MudahMed.Data.Entities.CorpGroup", b =>
                {
                    b.Property<int>("CorpGroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CorpGroupID"), 1L, 1);

                    b.Property<string>("Addr1")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Addr2")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Addr3")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("BankAccNo")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("BankID")
                        .HasColumnType("int");

                    b.Property<string>("ContactNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Fax")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RegNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TIN")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("city")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("postcode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("state")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CorpGroupID");

                    b.HasIndex("BankID");

                    b.ToTable("tblCorpGroup", (string)null);

                    b.HasData(
                        new
                        {
                            CorpGroupID = 1,
                            BankID = 1,
                            LastModifiedDate = new DateTime(2024, 10, 12, 1, 34, 2, 271, DateTimeKind.Local).AddTicks(739),
                            Name = "MudahMed Group",
                            createdDate = new DateTime(2024, 10, 12, 1, 34, 2, 271, DateTimeKind.Local).AddTicks(726)
                        });
                });

            modelBuilder.Entity("MudahMed.Data.Entities.Dependent", b =>
                {
                    b.Property<int>("Dep_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Dep_id"), 1L, 1);

                    b.Property<string>("BenefitID")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ClientNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DepResignDT")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Dep_dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dep_gender")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Dep_ic")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Dep_name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Dep_nationality")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Dep_race")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Emp_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Ent_dt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Join_dt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Relationship")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Dep_id");

                    b.HasIndex("Emp_id");

                    b.ToTable("tblDependents", (string)null);
                });

            modelBuilder.Entity("MudahMed.Data.Entities.Diagnosis", b =>
                {
                    b.Property<string>("Diag_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DiagGrp")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Diag_cat")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Diag_desc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsGP")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLTM")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemarksReq")
                        .HasColumnType("bit");

                    b.HasKey("Diag_id");

                    b.ToTable("tblDiagnosis", (string)null);
                });

            modelBuilder.Entity("MudahMed.Data.Entities.Drug", b =>
                {
                    b.Property<string>("DrugID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ATCClass")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("CeilingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("DrugCatFFS_CodeFK")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DrugChrgField_CodeFK")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("DrugDesc")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DrugMIMSClass_CodeFK")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DrugPoisonFFS_CodeFK")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("DrugRoute_CodeFK")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DrugType_CodeFK")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DrugUnit_CodeFK")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GenericName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ICDCode")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsChronic")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsExclusion")
                        .HasColumnType("bit");

                    b.Property<decimal?>("MaxPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("MaxQty")
                        .HasColumnType("int");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("money");

                    b.HasKey("DrugID");

                    b.ToTable("tblDrugs", (string)null);
                });

            modelBuilder.Entity("MudahMed.Data.Entities.Employee", b =>
                {
                    b.Property<int>("Emp_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Emp_id"), 1L, 1);

                    b.Property<string>("Addr1")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Addr2")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Addr3")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("BankAccNo")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("BankID")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Bank_id")
                        .HasColumnType("int");

                    b.Property<string>("BenefitID")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ClientNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Cont_no")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CorpID")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CostCentre")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dept_fk")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Designation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("Emp_dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Emp_gender")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Emp_ic")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Emp_name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Emp_nationality")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Emp_race")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("Ent_dt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Join_dt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Postcode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("Resign_dt")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Suboffice_fk")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Emp_id");

                    b.HasIndex("Bank_id");

                    b.ToTable("tblEmployees", (string)null);
                });

            modelBuilder.Entity("MudahMed.Data.Entities.IndustryField", b =>
                {
                    b.Property<int>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemID"), 1L, 1);

                    b.Property<string>("IndustryFieldName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ItemID");

                    b.ToTable("tblIndustryField", (string)null);

                    b.HasData(
                        new
                        {
                            ItemID = 1,
                            IndustryFieldName = "TPA"
                        },
                        new
                        {
                            ItemID = 2,
                            IndustryFieldName = "Corporate"
                        },
                        new
                        {
                            ItemID = 3,
                            IndustryFieldName = "HealthCare"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("MudahMed.Data.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("MudahMed.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("MudahMed.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("MudahMed.Data.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MudahMed.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("MudahMed.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MudahMed.Data.Entities.Clinic", b =>
                {
                    b.HasOne("MudahMed.Data.Entities.Bank", "Bank")
                        .WithMany("Clinics")
                        .HasForeignKey("BankID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("MudahMed.Data.Entities.Corp", b =>
                {
                    b.HasOne("MudahMed.Data.Entities.Bank", "Bank")
                        .WithMany("Corporations")
                        .HasForeignKey("BankID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MudahMed.Data.Entities.CorpGroup", "CorpGroup")
                        .WithMany("Corporations")
                        .HasForeignKey("CorpGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("CorpGroup");
                });

            modelBuilder.Entity("MudahMed.Data.Entities.CorpGroup", b =>
                {
                    b.HasOne("MudahMed.Data.Entities.Bank", "Bank")
                        .WithMany("CorpGroups")
                        .HasForeignKey("BankID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("MudahMed.Data.Entities.Dependent", b =>
                {
                    b.HasOne("MudahMed.Data.Entities.Employee", "Employee")
                        .WithMany("Dependents")
                        .HasForeignKey("Emp_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("MudahMed.Data.Entities.Employee", b =>
                {
                    b.HasOne("MudahMed.Data.Entities.Bank", "Bank")
                        .WithMany("Employees")
                        .HasForeignKey("Bank_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("MudahMed.Data.Entities.Bank", b =>
                {
                    b.Navigation("Clinics");

                    b.Navigation("CorpGroups");

                    b.Navigation("Corporations");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("MudahMed.Data.Entities.CorpGroup", b =>
                {
                    b.Navigation("Corporations");
                });

            modelBuilder.Entity("MudahMed.Data.Entities.Employee", b =>
                {
                    b.Navigation("Dependents");
                });
#pragma warning restore 612, 618
        }
    }
}
